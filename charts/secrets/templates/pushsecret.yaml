apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: push-k8s-secret
  namespace: default
spec:
  updatePolicy: Replace
  deletionPolicy: Delete
  refreshInterval: 60s
  secretStoreRefs:
    name: vault-backend
    kind: ClusterSecretStore
  selector:
    secret:
      name: k8s-secret # Source Kubernetes secret to be pushed
    # Alternatively, you can point to a generator that produces values to be pushed
#    generatorRef:
#      apiVersion: generators.external-secrets.io/v1alpha1
#      kind: ECRAuthorizationToken
#      name: prod-registry-credentials
#  template:
#    metadata:
#      annotations: { }
#      labels: { }
#    data:
#      password: "{{ .password | toString | upper }} is the really best!"
    # Uses an existing template from configmap
    # Secret is fetched, merged and templated within the referenced configMap data
    # It does not update the configmap, it creates a secret with: data["alertmanager.yml"] = ...result...
#    templateFrom:
#      - configMap:
#          name: application-config-tmpl
#          items:
#            - key: config.yml
  data:
    - conversionStrategy: None # Also supports the ReverseUnicode strategy
      match:
        secretKey: password # Source Kubernetes secret key to be pushed
        remoteRef:
          remoteKey: k8s-password