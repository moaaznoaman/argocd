apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
 name: monitoring-basic
spec:
 goTemplate: true
 goTemplateOptions: ["missingkey=error"]
 generators:
   - clusters:
       selector:
         matchExpressions:
           - { key: "cluster", operator: In, values: ["in-cluster"] }
 template:
   metadata:
     name: "{{ .name }}-basic-monitoring"
     labels:
       env: "{{ .metadata.labels.env }}"
       app: "infra"
       envType: "{{ .metadata.labels.env }}"
       appset: monitoring
     annotations:
       argocd.argoproj.io/sync-wave: '1'
   spec:
     project: infra
     sources:
       - repoURL: git@github.com:moaaznoaman/argocd-variables.git
         targetRevision: "{{ .metadata.labels.envBranch }}"
         ref: values
       - repoURL: "git@github.com:moaaznoaman/argocd.git"
         path: charts/monitoring
         targetRevision: HEAD # "{{ .metadata.labels.gitopsBranch }}"
         helm:
           ignoreMissingValueFiles: true
           releaseName: "prometheus"
           valueFiles:
             - "values.yaml"
             - "$values/environments/{{ .metadata.labels.env }}/monitoring-basic-values.yaml"
           values: |

              prometheus-blackbox-exporter:
                enabled: true
                serviceMonitor:
                  targets:
                    {{- $ctx := . }}
                    {{- $fsps := splitList "_" (default "" $ctx.metadata.labels.fsps) }}
                    {{- $prefixes := $fsps }}
                    {{- range $suffix := list "sso" "cb" "monitor" "docs" "api-org1" "governance" }}
                      {{- $prefixes = append $prefixes $suffix }}
                    {{- end }}
                    {{- range $prefix := $prefixes }}
                    - name: {{ $prefix }}.{{ $ctx.metadata.labels.domain }}
                      url: https://{{ $prefix }}.{{ $ctx.metadata.labels.domain }}
                      interval: 60s
                      scrapeTimeout: 60s
                      additionalMetricsRelabels:
                        instance: "{{- if eq $prefix "governance" }}Governance{{- else if eq $prefix "cb" }}CBx{{- else if eq $prefix "sso" }}Keycloak{{- else if eq $prefix "monitor" }}Monitoring{{- else if eq $prefix "docs" }}Docs{{- else }}FSPx-{{ title $prefix }}{{ end }}"
                    {{- end }}
              prometheusSpec:
                admissionWebhooks:
                  patch:
                    enabled: false
                additionalScrapeConfigs:
                - job_name: 'kube-prometheus'
                  kubernetes_sd_configs:
                    - role: endpoints
                  relabel_configs:
                    - source_labels: []
                      separator: ;
                      regex: .*
                      target_label: cluster
                      replacement: "demo-services"
                - honor_labels: true
                  job_name: federate
                  metrics_path: /federate
                  params:
                    match[]:
                    - '{nonexistant=""}'
                  scrape_interval: 15s
                  static_configs:
                  - targets:
                    - prometheus-kube-prometheus-prometheus.monitoring.svc:9090
                - job_name: 'blackbox-kubernetes-services'
                  metrics_path: /probe
                  params:
                    module: [http_2xx]
                  kubernetes_sd_configs:
                    - role: service
                  relabel_configs:
                    - source_labels: [__meta_kubernetes_service_label_monitor]
                      regex: true
                      action: keep
                    - source_labels: [__address__]
                      regex: (.*):\d+
                      replacement: http://${1}:80
                      target_label: __param_target
                    - target_label: __address__
                      replacement: prometheus-prometheus-blackbox-exporter.monitoring.svc.cluster.local:9115
                    - source_labels: [__meta_kubernetes_namespace]
                      target_label: kubernetes_namespace
                    - source_labels: [__meta_kubernetes_service_name]
                      target_label: kubernetes_name
              prometheus:
                annotations:
                  argocd.argoproj.io/skip-health-check: 'true'
              grafana:
                enabled: true
           parameters:
             - name: kube-prometheus-stack.enabled
               value: "true"
             - name: kube-prometheus-stack.prometheus.enabled
               value: "true"
             - name: promtail.enabled
               value: "false"
             - name: loki.enabled
               value: "{{ .metadata.labels.logging }}"
     destination:
       name: "{{ .name }}"
       namespace: "monitoring"
     ignoreDifferences:
       - group: "monitoring.coreos.com"
         kind: ServiceMonitor
         name: apps-all-namespaces
         jqPathExpressions:
         - .spec.remoteWrite[]?.writeRelabelConfigs[]?.action # .spec.endpoints[].relabelings[]
     syncPolicy:
       automated:
         selfHeal: true
       syncOptions:
         - CreateNamespace=true
         - ServerSideApply=true # Big CRDs
         - preserveResourcesOnDeletion=true
         - ApplyOutOfSyncOnly=true
         - Retry=true
         - Validate=false
         - PruneLast=true
       retry:
         limit: 5 # Maximum number of retries
         backoff:
           duration: 5s # Initial retry interval
           factor: 2 # Multiplication factor for the backoff
           maxDuration: 3m # Maximum retry interval
